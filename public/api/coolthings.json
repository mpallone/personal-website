{
  "data": [
    {
      "attributes": {
        "title": "PACE Satellite Flight Software",
        "image": "/assets/images/pace.png",
        "description": "<p>In 2016 the DSCOVR flight software lead gave me the opportunity to write flight software for the <a href=\"https://pace.oceansciences.org/oci.htm\">PACE satellite's Ocean Color Instrument (OCI)</a>.</p><p>In this role I wrote embedded C applications running under the VxWorks operating system that were responsible for ingesting thermal data to control onboard heaters, controlling telescope and half-angle mirror electronics, scrubbing system SRAM and handling memory corruption events, and controlling and monitoring processor card components. PACE and OCI have nearly identical processor cards, so some of the flight software that I wrote for OCI was reused on PACE.</p><p>I also wrote Python simulations of OCI's telescope and thermal subsystems to enable flight software testing in our development lab.</p><br /><h4 style=\"text-align: center\">The Most Difficult Bug I've Ever Solved</h4><br /><p>Bugs in embedded systems can be <a href=\"https://spacenews.com/software-fix-planned-to-restore-dscovr/\">notoriously difficult</a> to solve, so I made a point of proactively looking for issues that <a href=\"https://spacenews.com/dscovr-spacecraft-in-safe-mode/\">plagued us in the past</a>. In early 2019, I started to run weekend tests to see if our flight software could run for several days without issue. I discovered that, occasionally, a hardware watchdog on our processor card would expire, resetting the system and clearing all memory that might have been used to debug the issue. Debugging was made even more difficult by the fact the reset only happened every 8-20 hours.</p><p>After three months of investigation, I determined that the bug was likely due to timing in our interrupt service routines (ISRs). As I was limited in the exploratory debug code I could write (changing ISR code was changing system timing, making the issue disappear), I negotiated  a temporary processor card FPGA update so that a watchdog expiration left the processor in its locked-up state.</p><p>I had previously written the flight software CPU exception handling routines, so I was intimately familiar with our <a href=\"https://www.gaisler.com/index.php/products/components/gr712rc\">SPARCv8 CPU</a> and its hardware-debug components. (I even bought a very old SPARCv8 architecture book for $12 off of Amazon and <a href=\"https://github.com/mpallone/sparc-architecture-book\">started going through assembly exercises</a> so that I could write and read SPARC ASM for our flight software.) Armed with this knowledge and experience, I reproduced the bug and dumped the CPU state. I saw that the flight software was stuck in an infinite loop in ISR context where it was trying to update an internal data structure related to timekeeping. This was an error in an external time library we were using. Once they <a href=\"https://github.com/nasa/cFE/blob/d217ca39f1de74695f0d4e0eb427f90fbe8b1156/fsw/cfe-core/src/time/cfe_time_utils.c#L672\">fixed</a> the issue, the resets disappeared and our system could stay on indefinitely without resetting.</p><p>For this, the OCI flight software lead <a href=\"/assets/rhg-nomination.pdf\">nominated</a> me for a Robert H. Goddard Award, writing \"The OCI FSW development and test team and the [Goddard Flight Software] branch are fortunate to have such a highly motivated and technically excellent engineer on our team.\"</p>"
      }
    },
    {
      "attributes": {
        "title": "ExoMars Rover",
        "image": "/assets/images/exomars.png",
        "description": "<p>After DSCOVR, one my supervisors invited me to work with him and the <a href=\"https://mars.nasa.gov/msl/spacecraft/instruments/sam/\">Curiosity mass spectrometer</a> team on <a href=\"https://en.wikipedia.org/wiki/Mars_Organic_Molecule_Analyser\">MOMA</a>, the mass spectrometer for the European <a href=\"https://exploration.esa.int/web/mars/-/48088-mission-overview\">ExoMars rover</a>.</p><p>While my first task was to use <a href=\"https://d3js.org/\">D3</a> to add <a href=\"https://observablehq.com/@d3/horizon-chart\">Horizon Charts</a> to our internal data analysis web app, I primarily wrote the Python and C++ libraries and scripts that turned MOMA's binary data into products that our scientists and systems engineers could understand, such as <a href=\"https://en.wikipedia.org/wiki/Mass_spectrum\">mass spectra</a>.</p><p>I also <a href=\"http://699wiki.com/wiki/index.php/MOMA_Python_Time_Synchronization_Implementation\">solved tricky and persistent timestamp resolution issues</a> and increased data extraction speed by an order of magnitude, partially by replacing slow heritage Python code with our C++ library. That work is documented  <a href=\"http://699wiki.com/wiki/index.php/C699util_Developer%27s_Guide\">here</a> and is a good example of my technical writing.</p>"
      }
    },
    {
      "attributes": {
        "title": "DSCOVR Flight Software",
        "image": "/assets/images/dscovr.png",
        "description": "<p>My first job after graduating from UMBC was to test the C++ flight software for  <a href=\"https://en.wikipedia.org/wiki/Deep_Space_Climate_Observatory\">DSCOVR</a>, a climate satellite which perpetually views the light side of the earth because it sits at the <a href=\"https://en.wikipedia.org/wiki/Lagrangian_point\">Earth-Sun L1 point</a>.</p><p>I tested flight software subsystems responsible for command ingest, software application message passing, power node control, and task/OS management. Once this was completed I was selected out of ~10 test engineers to be the sole system test engineer for the command and data handling software. Tests in this role included flight software stress tests and an in-orbit bug fix test.</p><p>My role expanded beyond flight software testing to include supporting satellite-level environmental testing and ultimately launch support, where I sat in the DSCOVR launch control room with the flight software lead to debug in-flight issues and thoroughly test in-flight software bug fixes.</p><p>Before launch, my colleagues nominated me for the GSFC \"Mission Impossible\" peer award, where the principal attitude and orbital control flight software engineer wrote: \"He is a very high performer who is well liked, dedicated, innovative, learns quickly, and has shown a willingness to put in extra time and effort to see tough tasks through.\" </p>"
      }
    },
    {
      "attributes": {
        "title": "MIT's Computer Systems Security Course (Spring 2020)",
        "image": "/assets/images/mit-6858.png",
        "description": "<p>My embedded work at NASA never had security requirements, so to plug this hole in my engineering knowledge I did all projects, lectures, and paper readings for <a href=\"https://css.csail.mit.edu/6.858/2020/\">MIT's excellent Computer Systems Security course.</a></p><p>Projects focused on both attack and defense. I wrote buffer overflow exploits using ROP gadgets, XSS and CSRF exploits, and a browser worm inspired by the infamous <a href=\"https://web.archive.org/web/20130329061059/http://namb.la:80/popular/tech.html\">Samy worm.</a> I also broke a simple web server process into separate containers with a restricted RPC interface to improve isolation, implemented <a href=\"https://en.wikipedia.org/wiki/Concolic_testing\">concolic execution</a> functionality, and implemented a remote file system that had integrity guarantees even when an adversary controls the file server.</p><p>Since course instructors have requested that project solutions be kept private, I will only provide these repositories upon request. (Hopefully a student doesn't pose as an employer and trick me into doing their homework.)</p>"
      }
    },
    {
      "attributes": {
        "title": "Winner of Dr. DesJardin's Fall 2011 Artificial Intelligence Competition",
        "image": "/assets/images/ai.png",
        "description": "<p>The final project for my advisor <a href=\"https://en.wikipedia.org/wiki/Marie_desJardins\">Dr. Marie DesJardins'</a> AI class was to build an AI in LISP that could play the NP-complete game <a href=\"https://en.wikipedia.org/wiki/Mastermind_(board_game)\">Mastermind</a>. All submissions participated in a class-wide tournament.</p> <p>Classmate Max Spector and I liked the approach taken by Temporel and Kovacs, and decided to improve their Mastermind algorithm in our submission. We succeeded in scaling up the algorithm to work with eight colors and eight pegs, and reduced guess-generation time by 97.5 percent, with only a slight increase in the average number of guesses to reach a solution.</p> <p>Our solution cracked Mastermind codes in fewer guesses, and in less time, than all other submissions. Here is our <a href=\"https://github.com/mpallone/mastermind/blob/master/project-writeup/final-report.pdf\">writeup</a> and <a href=\"https://github.com/mpallone/mastermind/blob/master/dry-run-submission-8x8.lisp\">LISP code</a>.</p>"
      }
    },
    {
      "attributes": {
        "title": "TCP Implementation",
        "image": "/assets/images/ctcp.png",
        "description": "<p>To improve my networking knowledge and coding chops, I've studied portions of <a href=\"https://cs144.github.io/\">Stanford's Computer Networking course</a>.</p> <p>For fun and as a learning exercise, I also implemented their cardinal TCP project. This is a simplified version of TCP, but one which still requires managing multiple connections and sliding windows. My solution to this project is available <a href=\"https://github.com/mpallone/stanford-cs144-lab12/blob/master/ctcp.c\">here.</a> It's very satisfying seeing code I wrote work at the transport layer to get HTML from google.com!</p>"
      }
    },
    {
      "attributes": {
        "title": "Chord - Distributed Hash Table with Logarithmic Lookup",
        "image": "/assets/images/chord.png",
        "image-author": "By Seth Terashima (Tetra7 (talk)) - Own work, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=10089321",
        "description": "<p>In Spring 2015 I took <a href=\"https://www.csee.umbc.edu/people/faculty/konstantinos-kalpakis/\">Dr. Konstantinos Kalpakis'</a> graduate course in Advanced Operating Systems. The final project was to implement <a href=\"https://pdos.csail.mit.edu/papers/ton:chord/paper-ton.pdf\">Chord</a>, a distributed hash table with logarithmic lookup performance.</p> <p>Our Go implementation is <a href=\"https://github.com/mpallone/chord/blob/master/chord/chord.go\">here</a>.</p>"
      }
    },
    {
      "attributes": {
        "title": "Udacity Front-End Web Developer Nanodegree",
        "image": "/assets/images/udacity.png",
        "description": "<p>To become a more well-rounded engineer (and for fun), I <a href=\"/assets/udacity-nanodegree-cert.pdf\">completed</a> Udacity's Front End Web Developer Nanodegree in 2017.</p><p>Course topics and projects included responsive web design, browser and network request optimization, JavaScript best practices, MVC, and much more.</p><p>The <a href=\"https://github.com/mpallone/neighborhood-map\">final project</a> used Knockout, JQuery, the Google Maps API, and the New York Times API to create a handy <a href=\"https://mpallone.github.io/neighborhood-map/\">map</a> of New York City coffee shops. And of course, I used this knowledge to build <a href=\"https://github.com/mpallone/personal-website\">this site</a>."
      }
    },
    {
      "attributes": {
        "title": "Computer Science Undergraduate Teaching Assistant",
        "image": "/assets/images/umbc2.png",
        "description": "<p>I worked as an undergraduate teaching assistant for two years at my alma mater UMBC. This included teaching labs, tutoring and project assistance for lower level classes (up to and including data structures), and grading.</p> <p>I primarily supported <a href=\"https://www.csee.umbc.edu/courses/201/spring11/contact.shtml\">CMSC 201: Computer Science I for Majors,</a> where I helped teach students programming fundamentals (e.g., for-loops, strings, etc.), and more advanced topics such as recursion and design.</p> "
      }
    }
  ]
}
